package pt.quickLabPIV.interpolators;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.math3.util.FastMath;
import org.junit.Before;
import org.junit.Test;

import pt.quickLabPIV.Matrix;
import pt.quickLabPIV.PIVContextSingleton;
import pt.quickLabPIV.PIVContextTestsSingleton;
import pt.quickLabPIV.interpolators.Gaussian2DSubTypeFactoryEnum;
import pt.quickLabPIV.interpolators.IBasicCrossCorrelationInterpolator;
import pt.quickLabPIV.interpolators.ICrossCorrelationInterpolator;
import pt.quickLabPIV.maximum.MaxCrossResult;

/**
 * Provides unit tests to validate interpolation with an Assymmetric standard deviation 2D Gaussian function with rotation, over a matrix of 3x3 pixels generated by
 * an 2D Assymmetric Rotated Gaussian function with no noise added.
 * 
 * @author lpnm
 */
public class Gaussian2DAssymmetricRotatedInterpolatorAdvanced3PixelsAssymmetricRotatedTest {
    private static final int DIM_X = 3;
    private static final int DIM_Y = 3;
    private static final Gaussian2DSubTypeFactoryEnum TYPE1 = Gaussian2DSubTypeFactoryEnum.AssymmetricWithRotation;

    public IBasicCrossCorrelationInterpolator simpleAdapter(ICrossCorrelationInterpolator interp) {
        return new IBasicCrossCorrelationInterpolator() {
            private ICrossCorrelationInterpolator _interp = interp;
            
            @Override
            public MaxCrossResult interpolate(Matrix m, MaxCrossResult result) {
                List<MaxCrossResult> results = new ArrayList<>(1);
                results.add(result);
                results = _interp.interpolate(results);
                return results.get(0);
            }
        };
    }

    
    @Before
    public void setup() {
        PIVContextTestsSingleton.setSingleton();        
    }
    
    @Test
    public void centeredSigma10() {
        float uX = 0.0f;
        float uY = 0.0f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }
    
    //Left Sigma 10
    
    @Test
    public void deviated01LeftSigma10() {
        float uX = -0.1f;
        float uY = -0.1f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftSigma10() {
        float uX = -0.2f;
        float uY = -0.2f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftSigma10() {
        float uX = -0.3f;
        float uY = -0.3f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
       assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftSigma10() {
        float uX = -0.4f;
        float uY = -0.4f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
       assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftSigma10() {
        float uX = -0.5f;
        float uY = -0.5f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Sigma 10
    
    @Test
    public void deviated01RightSigma10() {
        float uX = 0.1f;
        float uY = 0.1f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightSigma10() {
        float uX = 0.2f;
        float uY = 0.2f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightSigma10() {
        float uX = 0.3f;
        float uY = 0.3f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightSigma10() {
        float uX = 0.4f;
        float uY = 0.4f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightSigma10() {
        float uX = 0.5f;
        float uY = 0.5f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Sigma 05
    
    @Test
    public void centeredSigma05() {
        float uX = 0.0f;
        float uY = 0.0f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }
    
    //Left Sigma 05
    
    @Test
    public void deviated01LeftSigma05() {
        float uX = -0.1f;
        float uY = -0.1f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftSigma05() {
        float uX = -0.2f;
        float uY = -0.2f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftSigma05() {
        float uX = -0.3f;
        float uY = -0.3f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftSigma05() {
        float uX = -0.4f;
        float uY = -0.4f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftSigma05() {
        float uX = -0.5f;
        float uY = -0.5f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Sigma 05
    
    @Test
    public void deviated01RightSigma05() {
        float uX = 0.1f;
        float uY = 0.1f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightSigma05() {
        float uX = 0.2f;
        float uY = 0.2f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightSigma05() {
        float uX = 0.3f;
        float uY = 0.3f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightSigma05() {
        float uX = 0.4f;
        float uY = 0.4f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightSigma05() {
        float uX = 0.5f;
        float uY = 0.5f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
       assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    
    //Sigma 01
    
    @Test
    public void centeredSigma01() {
        float uX = 0.0f;
        float uY = 0.0f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }
    
    //Left Sigma 01
    
    @Test
    public void deviated01LeftSigma01() {
        float uX = -0.1f;
        float uY = -0.1f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftSigma01() {
        float uX = -0.2f;
        float uY = -0.2f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftSigma01() {
        float uX = -0.3f;
        float uY = -0.3f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftSigma01() {
        float uX = -0.4f;
        float uY = -0.4f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftSigma01() {
        float uX = -0.5f;
        float uY = -0.5f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Sigma 01
    
    @Test
    public void deviated01RightSigma01() {
        float uX = 0.1f;
        float uY = 0.1f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightSigma01() {
        float uX = 0.2f;
        float uY = 0.2f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightSigma01() {
        float uX = 0.3f;
        float uY = 0.3f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightSigma01() {
        float uX = 0.4f;
        float uY = 0.4f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightSigma01() {
        float uX = 0.5f;
        float uY = 0.5f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    
    /****************************
     * Assymetric deviation
     ****************************/
       
    //Left, Bottom Sigma 10
    
    @Test
    public void deviated01LeftBottomSigma10() {
        float uX = -0.1f;
        float uY = +0.1f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftBottomSigma10() {
        float uX = -0.2f;
        float uY = +0.2f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftBottomSigma10() {
        float uX = -0.3f;
        float uY = +0.3f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftBottomSigma10() {
        float uX = -0.4f;
        float uY = +0.4f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftBottomSigma10() {
        float uX = -0.5f;
        float uY = +0.5f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
       assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Bottom Sigma 10
    
    @Test
    public void deviated01RightBottomSigma10() {
        float uX = 0.1f;
        float uY = -0.1f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightBottomSigma10() {
        float uX = 0.2f;
        float uY = -0.2f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightBottomSigma10() {
        float uX = 0.3f;
        float uY = -0.3f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightBottomSigma10() {
        float uX = 0.4f;
        float uY = -0.4f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightBottomSigma10() {
        float uX = 0.5f;
        float uY = -0.5f;
        float sigmaX = 1.0f;
        float sigmaY = 1.0f/2.0f;
        float theta = (float)FastMath.PI / 4.0f; //45 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Sigma 05    
    //Left Bottom Sigma 05
    
    @Test
    public void deviated01LeftBottomSigma05() {
        float uX = -0.1f;
        float uY = 0.1f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftBottomSigma05() {
        float uX = -0.2f;
        float uY = 0.2f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftBottomSigma05() {
        float uX = -0.3f;
        float uY = 0.3f;
        float sigmaX = 0.5f;
        float sigmaY = 0.35f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftBottomSigma05() {
        float uX = -0.4f;
        float uY = 0.4f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftBottomSigma05() {
        float uX = -0.5f;
        float uY = 0.5f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Sigma 05
    
    @Test
    public void deviated01RightBottomSigma05() {
        float uX = 0.1f;
        float uY = -0.1f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightBottomSigma05() {
        float uX = 0.2f;
        float uY = -0.2f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightBottomSigma05() {
        float uX = 0.3f;
        float uY = -0.3f;
        float sigmaX = 0.5f;
        float sigmaY = 0.35f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightBottomSigma05() {
        float uX = 0.4f;
        float uY = -0.4f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightBottomSigma05() {
        float uX = 0.5f;
        float uY = -0.5f;
        float sigmaX = 0.5f;
        float sigmaY = 0.5f/2.0f;
        float theta = (float)FastMath.PI / 3.0f; //60 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    
    //Sigma 01
        
    //Left Bottom Sigma 01
    
    @Test
    public void deviated01LeftBottomSigma01() {
        float uX = -0.1f;
        float uY = 0.1f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02LeftBottomSigma01() {
        float uX = -0.2f;
        float uY = 0.2f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03LeftBottomSigma01() {
        float uX = -0.3f;
        float uY = 0.3f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04LeftBottomSigma01() {
        float uX = -0.4f;
        float uY = 0.4f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05LeftBottomSigma01() {
        float uX = -0.5f;
        float uY = 0.5f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    //Right Bottom Sigma 01
    
    @Test
    public void deviated01RightBottomSigma01() {
        float uX = 0.1f;
        float uY = -0.1f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated02RightBottomSigma01() {
        float uX = 0.2f;
        float uY = -0.2f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated03RightBottomSigma01() {
        float uX = 0.3f;
        float uY = -0.3f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated04RightBottomSigma01() {
        float uX = 0.4f;
        float uY = -0.4f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

    @Test
    public void deviated05RightBottomSigma01() {
        float uX = 0.5f;
        float uY = -0.5f;
        float sigmaX = 0.210f;
        float sigmaY = 0.210f*1.5f;
        float theta = (float)FastMath.PI / 6.0f; //30 degrees
        PIVContextSingleton context = PIVContextSingleton.getSingleton();
        Matrix matrix = GaussianTestHelper.createMatrixWithGaussian2DAssymmetricRotated(DIM_X, DIM_Y, uX, sigmaX, uY, sigmaY, theta);
        MaxCrossResult result = GaussianTestHelper.setupPIVContext(context, DIM_X, DIM_Y, TYPE1);
        result.setCrossMatrix(matrix);
        
        IBasicCrossCorrelationInterpolator interpolator = simpleAdapter(context.getPIVReusableObjects().getOrCreateInterpolator());
        result = interpolator.interpolate(matrix, result);
        System.out.println(result);      
        
        assertEquals("Interpolation incorrectly deviated in I direction from integer max.", uY + (float)(DIM_Y/2), result.getMainPeakI(), 8e-3f);
        assertEquals("Interpolation incorrectly deviated in J direction from integer max.", uX + (float)(DIM_X/2), result.getMainPeakJ(), 8e-3f);
    }

}
